{"version":3,"sources":["interval.ts","variable.ts","indigo.ts","miniAdapton/microAdapton.ts","index.ts"],"names":[],"mappings":"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GIlBD,EAAE,GAAG,IDmCc,CAAA,ECnCP,CAAC,ADmCM,GCnCd,CAAY,CAAZ,CAAX,CDmCyB,CAAA,UAAA,EAAW,CAAX,EAAc,CAAd,CAAA;AClCzB,ADkCyC,IClCnC,CDkCF,CClCI,GAAG,OAAO,CAAC,GAAR,CAAY,EAAZ,CAAX;AACA,AJgBa,AGkBT,IClCE,ADkCF,CClCG,ADkCF,CAAC,CHlBO,CIhBH,AJgBG,KGkBT,EClCa,CAAC,ADkCF,EClCN,CAAW,CDkCjB,OHlBS,GAAmB,CIhBX,kBJgBR,EAWb;AI1BE,AJ2BF,AGOI,EClCF,EDkCE,CAAC,CAAC,GClCG,CAAC,EDkCN,GAAW,CAAC,CAAC,GClCf,CAAmB,CAAnB,ADkCa,EClCS,ADkCpB,EClCF;AACA,ADkCE,EClCF,OAAO,CAAC,CDkCC,CAAA,GAAA,KClCT,CAAmB,CAAnB,ADkCS,CAAA,CClCa,EAAtB,IDkCS,EAAQ,CAAR,CAAP;ACjCF,AJ2BK,AGOJ,IHPU,GAAG,EI3BP,CJ2BU,MI3BH,CAAC,EJ2BJ,GAAM,CAAC,CI3BX,CAAgB,AJ2BN,EI3BV,AJ2BkB,EAAR,EI3BY,AJ2BC,OI3BM,CAAC,OAAR,CAAgB,EAAhB,CAA7B;AACD,AJ0BuC,AGQvC,CCtCS,AD6BH,CC7BP,EAMA,KJwByC;AACvC,IAAA,EAAE,EAAE,EAAE,CAAC,EAAH,GAAQ,EAAE,CAAC,EADwB;AIvBzC,AJyBE,AGHW,IHGX,EAAE,CIzBG,ADsBM,CCtBL,AJyBF,AGHO,EHGL,CIzBR,AJyBS,CIzBG,CJyBN,EGHO,CHGC,EAAE,AGHI,CCtBD,AJyBF,CIzBG,KDsBP,ECtBD,CAAgB,CAAhB,CAAZ;AACA,AJsByC,GAAD,IItBjC,CAAC,MAAR,CAAe,EAAf,EAAmB,CAAnB,GACA;AJwBE,AGOF,CHVO,GGUD,KAAK,GAAG,SAAR,KAAQ,CAAI,CAAJ,EAAiB;AC9B/B,AD+BE,MAAI,CC/BC,AD+BA,CC/BC,AD+BA,GC/BR,CAAY,GD+BV,EAAe,EC/BE,CAAC,OAAR,CAAgB,CAAhB,CAAZ;AAEA,AFnBA,AFqCa,AGYT,AFjDJ,ICAA,ACiDI,AFjDJ,CEiDK,CAAC,CHZO,CAAA,GAAA,CCrCb,CEiDI,CHZY,CErChB,ADAA,CEiDgB,CHZH,CErCb,GCiDI,MFjDJ,CAAA,ECAA,CAAA,IDAA,CAAA,ECAA,CAAA,SDAA,CAAA,CAAA,CCAA,CAAA,CAAA;AEoBE,AD8BE,IAAA,CAAC,CC9BG,AD8BF,CC9BG,GAAG,CAAA,AD8BR,CAAQ,EC9BA,KD8BR,CAAgB,EC9BR,CAAA,ED8BR,GC9BQ,EAAM,GAAN,CAAV;AACA,AFpBF,AFyCO,AGSJ,AF/CI,ICHP,AFyCa,ACtCA,EGiBL,CJqBQ,CIrBN,EJqBS,CIrBN,AHjBO,CGiBP,AFpBb,EDGuB,CGiBV,AFpBb,IFyCa,GAAM,CIrBN,AJqBO,ACtCP,CGiBA,CJqBM,EEzCnB,AFyC2B,CEzC3B,CFyCmB,CCtCI,CDsCS,ACtCR,CAAD,EAAO,CCH9B,ADGuB,CCHvB,CDG2C,MGiB9B,EAAoB,CAApB,EAAuB,AFpBpC,CEoBa,AFpBb,CEoBE,AFpBF;AEqBE,AJoBsC,AGUvC,AF/CC,CE0CF,ECzBE,GAAA,AHjBM,GDqCiC,KIpBvC,CAAA,AHjBe,GAAG,EGiBlB,EAAM,CAAC,EAAD,CAAN,AHjB0B,CAAC,SAAT,CAAmB,CAAC,CAAC,MAArB,EAA6B,CAA7B,CAAlB;AGkBA,AFrBF,AFyCE,EIpBA,EFrBF,AFyCE,EAAE,EAAE,CIpBG,CAAC,AJoBF,CAAC,EIpBP,AJoBI,CIpBQ,AFrBd,CEqBc,CJoBA,CEzCd,CEqBc,AJoBE,CAAC,EADwB,GExCzC,CAAA,CEqBc,CAAA,KAAA,EAAM,CAAN,CAAZ,CFrBF,CAAA;AEsBE,AJoBA,AGUK,AFhDL,EGkBA,EJoBA,AGUW,EHVT,ACtCE,CEgDU,CHVV,CIpBG,CAAC,AJoBF,AGUW,CHVV,EIpBP,AJoBI,CIpBQ,CHlBC,CGkBC,AJoBF,CIpBG,CJoBD,CAAC,AGUJ,CFhDO,EEgDD,CAAI,CFhDrB,CGkBY,CD8BK,AFhDO,CGkBxB,CD8B2B;AC7B5B,AFlBY,AFmC4B,AGavC,AFhDE,GDmCoC,GGahC,CDhDK,ACgDJ,CDhDI,ECgDW,CFhDpB,KCAS,GAAqB,ADA9B,CAAA,OCAS,CDAT,CAAA,EAAA,EAAW,CAAX,CAAA,EAAY;AGoBhB,AFnBa,AFqCX,AGWE,AFjDc,CDmCX,GGcH,EFjDc,CCCL,CAAA,CCgDJ,EAAE,CFjDa,ECCX,ADDa,GCCM,CAAnB,UCgDF;AC5BT,AFnBW,AC+CI,AFjDD,KAAZ,CGqBI,AHrBJ,CGqBK,AFnBI,CAAA,EEmBD,CAAA,ED4BK,CC5BL,AFnBC,AC+CK,CAAC,ED/Ca,CAAnB,GC+CI,CC5BL,CAAA,KAAA,EAAM,GAAN,CAAV;AACA,AFnBW,AFgCA,AGcY,AFhDtB,GAFD,EEiDsB,CC1BhB,CFnBK,AFgCA,CIbH,AFnBG,AFgCA,CClCJ,EGqBI,AJaA,CIbA,AFnBA,EFgCG,CIbH,AFnBiB,CAAjB,CFgCA,MIbA,CAAA,mBAAA,EAAoB,CAApB,EAAuB,CAAvB,CAAX;AACA,AFnBW,AC8CT,AFhDA,IEgDA,EC3BI,CAAC,AFnBI,CAAA,EEmBD,AD2BF,CC3BE,CD2BA,EC3BA,AFnBC,CC4CW,ED5CQ,CAAnB,IEmBD,CAAA,KAAA,EAAM,GAAN,CAAV;AACA,AFhBF,AFgCO,AGWH,AFhDA,ICKE,AFgCO,AGWT,EC3BI,CJgBQ,AGWT,CC3BG,CD2BD,CHXU,CIhBN,CAAA,CFhBE,AC2CF,EC3BA,CFhBK,AC2CT,EAHe,CHRX,CEhCb,EFgCmB,CIhBN,AJgBO,CIhBP,CJgBM,EAAQ,EAAR,EAAa,OIhBnB,EAAe,CAAf,EAAkB,CAAlB,CAAX;AACA,AJgBA,AGWE,AFhDM,IEgDN,EC3BI,AJgBA,EAAE,ACrCA,CEgDD,CFhDC,CDqCG,AGWF,EFhDoB,CAAC,CDqCf,AGWF,AFhDkB,CDqCf,CIhBC,CD2BR,CHXE,CIhBS,AJgBA,AGOE,CCvBD,AHrBb,CDqCc,CIhBF,AJgBG,EIhBE,AJgBL,EIhBA,CAApB,AJgB4B,EAAE,CAAC,EAApB,EAAwB,EAAE,CAAC,EAAH,GAAQ,EAAE,CAAC,EAAnC,EAAuC,EAAE,CAAC,EAAH,GAAQ,EAAE,CAAC,EAAlD,EAAsD,EAAE,CAAC,EAAH,GAAQ,EAAE,CAAC,EAAjE,CAAX;AIfA,AFjBF,AFiCE,AGWE,AFjDM,GGsBR,CFjBI,AC4CF,EC3BF,AJgBM,EAAE,ACtCK,GDsCF,AGWF,AFjDO,CCKJ,CC4CD,CC3BX,AHtBgB,CGsBhB,AFjBe,AFiCA,CAAC,ACtCA,CAAA,EDsCL,ACtCH,CGsBR,AJgBoB,EIhBd,AJgBgB,CAAC,CEjCnB,CFiCgB,GAAQ,EAAE,CAAC,CEjChB,CEiBf,AFjBgB,AFiCL,CEjCI,CFiCoB,CEjCR,CAAZ,AFiCsB,CAAC,CEjCF,CFiCD,GAAQ,EAAE,CAAC,EAAnC,EAAuC,EAAE,CAAC,EAAH,GAAQ,EAAE,CAAC,EAAlD,EAAsD,EAAE,CAAC,EAAH,GAAQ,EAAE,CAAC,EAAjE,CAAX;AIfA,AFlByC,AFkCzC,AGKsB,AF5Cd,EGuBR,CDqBA,KF5CsB,CGuBf,AFlBkC,AFkClC,CIhBC,CHvBiB,EGuBzB,AFlB6C,CEkBjC,AFlBkC,ADLrB,EAAA,CCKgB,ADLhB,CCKyB,CAAC,ADL3C,GCK8C,CAAb,EEkBlB,CAAC,CFlBmC,EEkB/C,CAAgB,MFlBa,IEkBb,CAAA,EAAC;AAAI,AFlBmC,AFkC5D,AGaR,CD/CF,GFkCU,EAAE,EAAA,CGaH,CHbA,AGaP,CC7BiC,CAAC,CAAC,QAAF,EAAA;AAAY,AJgBjC,AGcb,AFpDG,CE0CG,ECpBO,CAAZ,AJgBY,EAAE,EAAA,ACtCR,CAAC,CAAC,MAAF,CAAS,EAAT,GAAc,CAAC,CAAC,EAApB,EAAwB;AGuB1B,AFTK,AFwBE,ACrCH,EGsBJ,CJeA,CExBW,KESJ,CAAC,GAAR,AHtBI,CGsBQ,EFTW,GAAG,CESd,CHtBR,CAAA,IGsBQ,CAAM,CAAA,AFTP,EDbP,CGsBc,AHtBd,EAAA,EAAW,CAAX,CAAA,EGsBc,AHtBF,CGsBE,AFTQ,CAAC,IEST,AFTQ,EESF,AFTwB,CES9B,CAAN,EAAc,GFTA,EAA0D,EESxE,EAAc,IFTA,EESd,AFTgG,CES1E,CAAA,GAAA,CFTR,EAAkH,KES1G,CAAA,EFTR,EAAoI,CES5H,EAAM,CAAN,CAAtB,CAAZ;AACD,AFTC,AFwBD,AGGY,AFzCO,CDkCb,KEpBC,CAAC,AC2BI,CAAA,AFzCO,ECcI,CC2BX,GAAG,AFzCU,EAAE,CEyCf;AChBb,AFVI,ADfyB,ICezB,IAAI,EAAA,ADfqB,EAAE,ECcP,ADdS,GAAL;AG0B1B,AFVE,AFkBS,AGmBN,AFrD+B,ICgBlC,ACqCS,EC3BL,CAAC,AJQI,CAAA,EIRD,AD2BO,AFrDmB,CG0B1B,AFVD,AFkBE,CClC2B,CCgB7B,ACqCW,CC3BV,AJQI,AClC0B,GDkC7B,GEpBW,EEYZ,AD2BC,CC3BD,KAAA,AD2BU,CAAI,CC3BR,AD2BI,EAAmB,CC3B7B,CAAV,CD2BoB,EAAyB;AC1B7C,AFVE,ACqCF,AFtD0B,EEsD1B,CAAC,CDrCC,ACqCA,EC3BI,EAAE,ED2BR,CC3BW,CAAA,AFVD,CCqCC,CDrCD,CEUC,CD2BX,MDxCsB,CEaX,CAAA,mBAAA,EAAoB,CAApB,EAAuB,CAAvB,CAAX;AACA,AFVE,AFsBG,AGeL,AFvDgB,EEuDhB,EDrCE,AFsBS,EIZL,CAAC,AJYO,AGeT,AFvDD,CEuDE,AFvDF,CEuDC,CC3BK,AFVF,AFsBS,AGejB,CC3BU,CFVF,EEUE,IFdY,CF0BX,GIZD,AJYO,CIZP,AJYQ,EAAD,EAAQ,CIZf,CJYO,CIZD,CJYc,EIZpB,CAAV;AACA,AFVE,AFsBF,AGeD,AFvDI,CEoDE,GDlCH,CDpBA,CG8BI,EAAE,GAAG,AH5BF,CG4BE,AFVD,EAAA,CEUC,QAAA,CAAA,cAAA,EAAe,CAAf,EAAkB,CAAlB,CAAX;AACA,AFhBsB,AF4BtB,ACxCI,GCYJ,GEgBM,AJYF,EIZI,AJYF,CAAC,EIZI,AJYP,CIZO,CH5BP,EG4BO,AJYE,EAAT,IAAe,ACxCf,CAAA,CG4BO,CAAA,GJYc,EAAE,CAAC,ACxCxB,CAAA,CDwCJ,CCxCI,CDwC4B,CCxCjB,CAAX,CAAA,EAAY,IG4BL,EAAoB,CAApB,EAAuB,CAAvB,CAAX;AACA,AFVA,AFsBE,AGUS,AFnDO,ECmBlB,IEUM,AFVF,CAAC,ACgCM,CAAA,AFnDO,EDyCV,IEtBR,ACgCW,AFnDa,CCmBX,CDnBa,CG6BT,ADsBA,GCtBG,CAAC,EAAD,ADsBT,ECtBc,AFVX,CAAD,AFsBX,CIZkB,CFVL,CEUc,EAAT,CAApB;AACA,AFXoB,AFuBnB,AC1C0B,GG8B3B,AJUA,GIVA,GJYO,CC1CoB,CCmBP,CAAC,ADnBQ,CCmBP,CEWtB,AH9B+B,CG8B/B,EH9B0B,GG8B1B,EAAM,EFXc,CAAc,GAAd,CAAkB,CAAlB,CAAA,EEWpB;AACA,AFZwC,AFwBtC,AC3CkC,EG+BpC,CFZA,MEYO,CAAC,AH/B4B,CD2C3B,CAAA,AC3C6B,CG+BtC,CAAY,AH/B4B,CD2C/B,OAAA,CAAA,EIZc,CAAC,AJYf,EAAI,CIZD,CAAgB,AJYnB,EAAQ,QIZW,CAAA,EAAC;AAAI,AFXjC,AFuBkB,AC3CQ,MD2CR,EAAE,CEvBb,CAAP,AFuBsB,CIZW,CAAC,CAAC,EJYR,EAAE,CAAC,EAAb,CIZgB,EAAA;AAAY,AFV9C,AFsBmC,AC3ClB,CCWX,EEoBO,CAAZ,EJYkC,CC3C9B,CD2CgC,AC3ChC,ED2CkC,KAAK,EAAE,CAAC;AIX9C,AJWiB,AC1Cd,EG+BH,GJWS,CAAP,GIXK,CAAC,GAAR,CAAY,MAAA,MAAA,CAAM,CAAA,GAAA,QAAA,CAAA,KAAA,EAAM,CAAN,CAAN,EAAc,OAAd,EAAc,MAAd,CAAsB,CAAA,GAAA,QAAA,CAAA,KAAA,EAAM,CAAN,CAAtB,CAAZ;AACD,AFtBY,AFiCV,AC1CA,EGiCH,KFxBa,CAAA,YAAA,GAAY,YAAZ;AEyBb,AJSC,AC1CA,CDmCM,ACjDA;AGgDP,AFRO,IAAM,KAAK,GAAG,SAAR,KAAQ,CAAC,EAAD,EAAW;AEShC,AFT+C,AFSlC,ACjDA,ODiDA,ACjDA,CDiDA,ACjDA,CCwCmC,EFSnC,GAAG,CCjDH,EDiDA,CCjDO,OAAP;AGkDb,AFTE,IAAA,CAAC,EAAE,WAAW,CAAC,EAAZ,CAAe,EAAf,CAD2C;AEWhD,AFTE,AFgBK,AC1CA,IC0BL,AFgBW,AC1CA,EAAE,GAAG,GD0CG,GEhBR,AFgBW,EEhBT,CD1BF,EAAK,CC0BC,AD1BA,EAAD,CC0BH,AFgBF,CC1CgB,CCwBmB,MFkBxB,CAAC,EAAD,EAAQ,EAAR,EAAe,GAAf,EAAuB;AIN/C,AFTE,AFeqC,AC1CF,IC2BnC,EFeqC,GAAA,AC1CD,GC2B5B,EAAE,AFe2B,KAAA,CAAA,EAAA,YEf3B;AEUZ,AFVkB,AFeqB,ACzCrC,IDyCqC,ACzCrC,EAAE,CDyCmC,CCzCnC,EDyCmC,AC1CD,GC2BpB,CFeqB,CEfrB;AEWlB,AFXoB,AFe2B,ACxC7C,IAAA,MAAM,EAAE,QAAQ,CAAC;AGqCnB,AFfgD,ADxBV,GCwBS,ADxBV;AGwCrC,AFZE,AFeA,ACxCA,CCqBK,ADxBA,QD2CE,IAAI,CAAC,GAAL,CAAS,EAAE,CAAC,EAAH,GAAQ,EAAE,CAAC,EAApB,IAA0B,GAA1B,IAAiC,IAAI,CAAC,GAAL,CAAS,EAAE,CAAC,EAAH,GAAQ,EAAE,CAAC,EAApB,IAA0B,GAAlE;AACD,CAFM;AIAP,AFlBa,ADxBA,OCwBA,ADxBA,CCwBA,ADxBA,EAAA,GCwBA,ADxBE,EAAF,CCwBK,KAAL;AEmBX,AJDW,ACrCb,IAAM,EGsCE,CAAC,AJDI,CAAA,EICD,CAAA,EHtCG,CGsCH,EJDC,ACrCK,GDqCG,CCrCrB,EGsCY,CAAA,IJDC,CICD,EAAM,GAAN,CAAV;AACA,AFdK,IAAM,EEcL,EAAE,CFdQ,EEcL,CAAA,AFdQ,GEcR,MFdA,EEcA,CAAA,EFdQ,CAAC,CAAD,EAAY,aEcpB,EAAoB,CAApB,EAAuB,CAAvB,CAAX;AACA,AFf4C,ADvBvC,IAAM,EGsCL,CAAC,EFfqC,CEelC,CAAA,AHtCQ,GGsCR,AHtCW,MCuBkC,CAAC,CEe9C,CAAA,AHtCC,GCuBiC,CAAkB,CEepD,AFfqD,CAAC,CEehD,AFf4B,ADvBvB,CCuBuB,ADvBtB,CAAD,CGsCX,CAAV,AHtC0B,CGmC5B,CAIE;AFhBkE,ADtBlE,CCsBK,QDtBE,IAAI,CAAC,GAAL,CAAS,CAAC,CAAC,MAAF,CAAS,EAAT,GAAc,CAAC,CAAC,MAAF,CAAS,EAAhC,IAAsC,SAA7C;AGuCA,AHtCD,CAFM,KGwCC,EAAE,GAAG,CAAA,GAAA,QAAA,CAAA,kBAAA,EAAmB,CAAA,GAAA,QAAA,CAAA,IAAA,EAAK,CAAL,EAAQ,CAAR,CAAnB,EAA+B,IAA/B,EAAqC,EAArC,CAAX,CALF,CAME;AFlBW,OAAA,CAAA,KAAA,GAAK,KAAL;AEmBX,AH1CW,MG0CL,CH1CK,CAAA,OAAA,EG0CM,CH1CC,EG0CE,CAAC,EAAD,EAAK,AH1Cd,EG0CS,CAApB;AACA,AFhBK,GEgBL,CFhBW,EEgBX,GFhBgB,GAAG,EEgBnB,CAAA,KAAA,CFhBW,CEgBL,IFhBa,CAAC,MEgBpB,KFhBmB,EAA0B;AEiB7C,AFhBA,ADxBK,EGwCL,AFhBA,EDxBW,KGwCJ,AFhBA,ADxBS,CGwCR,AFhBA,EDxBW,CGwCnB,AFhBA,CEgBY,AFhBA,ODxBD,IGwCY,CAAC,AHxCL,CCwBnB,ADxBoB,CAAD,CGwCP,AFhBe,CEgBC,AHxCJ,UGwCI,AFhBU,CEgBV,AFhBW,EEgBV,CFhBF,CAAgB,UAAA,CAAA,EAAC;AEgBX,AFhBe,ADxBX,SAAA,CAAC,CGwCL,AFhBe,ADxBT,CGwCL,AFhBe,ADxBT,CGwCL,AFhBe,KDxBZ,CAAS,EGwCd,AFhBe,ADxBV,EGwCL,AFhBe,CDxBI,CAAC,CAAC,MAAF,CAAS,EAAxB,IAA8B,CAA9B;AGwCQ,AFhBe,ADxBQ,CAA/D,EGwCO,AFhBe,CEgB3B,AFhBA;AEiBA,AFhBA,EEgBA,AFhBA,OEgBO,CAAC,GAAR,AFhBW,CEgBC,AFhBA,IAAZ,CAAiB,CEgBL,MAAA,CAAM,CAAA,CFhBA,EEgBA,AFhBD,EAAK,EAAL,EAAO,EEgBN,CAAA,KAAA,EAAM,CAAN,CAAN,EAAc,OAAd,EAAc,MAAd,CAAsB,CAAA,GAAA,QAAA,CAAA,KAAA,EAAM,CAAN,CAAtB,CAAZ;AACD,AFjB8B,ADzBlB,OAAA,CAAA,GCyBkB,EAAE,ADzBpB,CCyBqB,EDzBhB,KAAL,CCyBkB,GAAc,EAAE,CAAC,QAAjB;AEmB/B,AFnBwD,GAAtD;AEoBA,AFlBA,MAAM,iBAAiB,GAAoB,IAAI,GAAJ,EAA3C;AEmBA,MAAM,CAAC,GAAG,CAAA,GAAA,QAAA,CAAA,KAAA,EAAM,GAAN,CAAV;AACA,AFlBA,MEkBM,CAAC,AFlBkB,GEkBf,CAAA,AFlBe,EAAA,CEkBf,EFlBe,CAAA,EAAA,GEkBf,CAAA,KAAA,EAAM,EFlBS,CEkBf,CAAV,CFlByB,WAAzB,EAAyB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","file":"src.77de5100.js","sourceRoot":"../src","sourcesContent":["// All intervals are closed unless the bounds are infinite.\nexport type t = {\n  // lower bound\n  lb: number,\n  // upper bound\n  ub: number,\n}\n\nexport const fromFloat = (f: number) => ({lb: f, ub: f});\n\nexport const unbounded = {lb: -Infinity, ub: Infinity};\n\nexport const intersect = (i1: t, i2: t): t | null => {\n  // If the intervals do not intersect\n  if (i1.ub < i2.lb || i1.lb > i2.ub) {\n    return null;\n  } else {\n    return {lb: Math.max(i1.lb, i2.lb), ub: Math.min(i1.ub, i2.ub)}\n  }\n}\n\n// returns intersection of i1 and i2 if it exists\n// if not, returns closest point in i1 to i2.\nexport const intersectBestEffort = (i1: t, i2: t): t => {\n  const intersection = intersect(i1, i2);\n  if (intersection !== null) {\n    return intersection;\n  } else if (i1.ub < i2.lb) {\n    return fromFloat(i1.ub);\n  } else {\n    return fromFloat(i1.lb);\n  }\n}\n\n// interval arithmetic (see Appendix A of Indigo TR)\n// TODO: TR employs some optimiziations, but I'm not sure if they're necessary\n\nexport const add = (i1: t, i2: t): t => ({\n  lb: i1.lb + i2.lb,\n  ub: i1.ub + i2.ub,\n})\n\nexport const sub = (i1: t, i2: t): t => ({\n  lb: i1.lb - i2.ub,\n  ub: i1.ub - i2.lb,\n})\n\nexport const mul = (i1: t, i2: t): t => {\n  const lb = Math.min(i1.lb * i2.lb, i1.lb * i2.ub, i1.ub * i2.lb, i1.ub * i2.ub);\n  const ub = Math.max(i1.lb * i2.lb, i1.lb * i2.ub, i1.ub * i2.lb, i1.ub * i2.ub);\n  return {lb, ub};\n}\n\nexport const div = (i1: t, i2: t): t => {\n  // TODO: maybe want to change this behavior to return Infinity or to return null\n  if (i2.lb <= 0. && 0. <= i2.ub) {\n    throw \"divide by zero\"\n  } else {\n    return mul(i1, {lb: 1. / i2.ub, ub: 1. / i2.lb});\n  }\n}\n\nexport const is_close = (i1: t, i2: t, tol=1e-5): boolean => {\n  return Math.abs(i1.lb - i2.lb) < tol && Math.abs(i1.ub - i2.ub) < tol;\n}\n","import * as Interval from './interval';\n\nexport type t = {id: string, bounds: Interval.t}\n\nexport const tighten = (v: t, i: Interval.t): t => {\n  const intersect = Interval.intersect(v.bounds, i);\n  if (intersect !== null) {\n    return {...v, bounds: intersect}\n  } else {\n    // the constraints are actually unsatisfiable at this point\n    // this code helps us find a locally-error-best solution\n    const {lb: vLB, ub: vUB} = v.bounds;\n    if (v.bounds.ub < i.lb) {\n      return {...v, bounds: {lb: vUB, ub: vUB}};\n    } else {\n      return {...v, bounds: {lb: vLB, ub: vLB}};\n    }\n  }\n}\n\nexport const mk = (id: string): t => ({\n  id,\n  bounds: Interval.unbounded\n})\n\nconst TOLERANCE = 1e-5;\n\nexport const isConst = (v: t): boolean => {\n  return Math.abs(v.bounds.ub - v.bounds.lb) < TOLERANCE;\n}\n\nexport const value = (v: t): number => (v.bounds.ub + v.bounds.lb) / 2;\n","import * as VariableFoo from './variable';\nimport * as Interval from './interval';\nimport { isConst } from './variable';\nimport * as _ from 'lodash';\n\ntype Strength = number;\n\nexport const required: Strength = Infinity;\nexport const strong: Strength = 9;\nexport const medium: Strength = 8;\nexport const weak: Strength = 7;\nexport const weaker: Strength = 6; \n\ntype ConstraintStatus = 'sat' | 'unsat' | 'unknown';\n\nconst TOLERANCE = 1e-5;\nconst is_close = (x: number, y: number) => Math.abs(x - y) < TOLERANCE;\n\nexport type Constraint = {\n  vars: Set<Variable>,\n  tighten: Map<Variable, () => void>,\n  strength: Strength,\n  status: () => ConstraintStatus,\n  toString: () => string,\n}\n\nexport const mkConstraint = (vars: Set<Variable>, tighten: Map<Variable, () => void>, toString: () => string, status: () => ConstraintStatus, strength: Strength): Constraint => {\n  const c: Constraint = {\n    vars,\n    tighten,\n    strength,\n    status,\n    toString,\n  };\n  vars.forEach((v) => v.constraints.add(c));\n  return c;\n}\n\nexport type Variable = {\n  v: VariableFoo.t,\n  constraints: Set<Constraint>,\n  toString: () => string,\n}\n\nexport const mkVar = (id: string): Variable => ({\n  v: VariableFoo.mk(id),\n  constraints: new Set(),\n  toString: () => id,\n})\n\nexport const value = (v: Variable): number => VariableFoo.value(v.v);\n\ntype Queue = Constraint[];\n\nexport const solve = (constraints: Constraint[]): void => {\n  console.log('begin solve', constraints.map(c => c.toString()))\n  constraints.sort((c1, c2) => c2.strength - c1.strength);\n\n  const activeConstraints: Set<Constraint> = new Set();\n\n  for (const constraint of constraints) {\n    console.log(`solving: ${constraint}`);\n    const tightVariables: Set<Variable> = new Set();\n    const queue = [constraint];\n    while (queue.length > 0) {\n      const c = queue[0];\n      console.log(`visiting: ${c}`);\n      tighten_bounds(c, queue, tightVariables, activeConstraints);\n      check_constraint(c, activeConstraints);\n      queue.shift();\n    }\n  }\n}\n\nconst tighten_bounds = (c: Constraint, q: Queue, tightVariables: Set<Variable>, activeConstraints: Set<Constraint>): void => {\n  c.vars.forEach((v: Variable) => {\n    console.log(`variable ${v}`);\n    console.log(`tightVariables`, Array.from(tightVariables.values()).map(v => v.toString()));\n    if (tightVariables.has(v)) return;\n    const oldBounds = v.v.bounds;\n    c.tighten.get(v)();\n    // TODO: maybe only add tight variables when they stop making progress? idk\n    tightVariables.add(v);\n    console.log('bounds', oldBounds, v.v.bounds);\n    if (!Interval.is_close(oldBounds, v.v.bounds)) {\n      console.log(`${v} changed from`, oldBounds, `to`, v.v.bounds);\n      v.constraints.forEach((c: Constraint) => {\n        if (activeConstraints.has(c) && q.find((o) => c === o) === undefined) {\n          q.push(c);\n        }\n      })\n    }\n  })\n}\n\nconst check_constraint = (c: Constraint, activeConstraints: Set<Constraint>): void => {\n  if (c.strength === required && c.status() === 'unsat') {\n    throw 'Required constraint is not satisfied';\n  } else if (c.vars.size === 1) {\n    // even if a unary constraint is not a constant equality, we don't learn anything new from\n    // evaluating it more than once by monotonicity\n    return;\n    // TODO: maybe I can replace this check with a check for status === 'unknown'\n    // then I can push the burden to the constraint for verifying this\n  } else if (!Array.from(c.vars.values()).every((v) => VariableFoo.isConst(v.v))) {\n    activeConstraints.add(c);\n  } else if (c.status() === 'sat') {\n    // we've completely solved this constraint. throw it away\n    // TODO: I don't totally understand this. couldn't something else violate it? I guess not by\n    // monotonicity. Maybe it would be useful to keep track of provenance for debugging tho, so\n    // maybe don't throw it away altogether?\n    activeConstraints.delete(c);\n  } else {\n    throw 'Constraints are too difficult';\n  }\n}\n\n/* \nTODO: intersect returns `null` if the intersection fails. not sure how to deal with that b/c need to\ncatch it to determine unsat.\n\nTODO: inequality constraints\nTODO: affine versions of the above\nTODO: min and max\n*/\n\nexport const mkConstEqConstraint = (x: Variable, c: number, strength=required): Constraint => mkConstraint(\n  new Set([x]),\n  new Map([[x, () => {\n    // x.v.bounds = Interval.intersect(x.v.bounds, Interval.fromFloat(c));\n    x.v.bounds = Interval.intersectBestEffort(x.v.bounds, Interval.fromFloat(c));\n  }]]),\n  () => `${x} = ${c}`,\n  () => {\n    if (!isConst(x.v)) {\n      return 'unknown'\n    } else {\n      return is_close(value(x), c) ? 'sat' : 'unsat';\n    }\n  },\n  strength\n);\n\nexport const mkEqConstraint = (x: Variable, y: Variable, strength=required): Constraint => mkConstraint(\n  new Set([x, y]),\n  new Map([\n    [x, () => {\n      // x.v.bounds = Interval.intersect(x.v.bounds, y.v.bounds);\n      x.v.bounds = Interval.intersectBestEffort(x.v.bounds, y.v.bounds);\n    }],\n    [y, () => {\n      // y.v.bounds = Interval.intersect(y.v.bounds, x.v.bounds);\n      y.v.bounds = Interval.intersectBestEffort(y.v.bounds, x.v.bounds);\n    }],\n  ]),\n  () => `${x} = ${y}`,\n  () => {\n    if (!(isConst(x.v) && isConst(y.v))) {\n      return 'unknown'\n    } else {\n      return is_close(value(x), value(y)) ? 'sat' : 'unsat';\n    }\n  },\n  strength,\n)\n\ntype Plus = { type: 'plus', exprs: AffineExpr[] };\nexport const plus = (...exprs: AffineExpr[]): Plus => ({ type: 'plus', exprs });\n\n// The restriction here ensures expressions are affine.\ntype Mul = { type: 'mul', scalar: number, expr: AffineExpr };\nexport const mul = (scalar: number, expr: AffineExpr): Mul => ({ type: 'mul', scalar, expr });\n\nexport type AffineExpr =\n| number\n| Variable\n| Plus\n| Mul\n\n// a_1x_1 + ... + a_nx_n + b\nexport type CanonicalAffineExpr = {\n  terms: Map<Variable, number>,\n  bias: number,\n}\n\nexport type AffineConstraint = { lhs: AffineExpr, op: 'eq' | 'le' | 'ge', rhs: AffineExpr }\n\nexport type CanonicalAffineConstraint = CanonicalAffineExpr & {op: 'eq' | 'le' | 'ge'};\n\n// turns affine constraint into a_1x_1 + ... + a_nx_n + b = 0 where a_1, ..., a_n != 0\nconst canonicalizeAffineConstraint = (c: AffineConstraint): CanonicalAffineConstraint => {\n  const cLHS = canonicalizeExpr(c.lhs);\n  const cRHS = canonicalizeExpr(c.rhs);\n  const lhsMinusRhsTerms = new Map(cLHS.terms);\n  cRHS.terms.forEach((v, k) => lhsMinusRhsTerms.has(k) ? lhsMinusRhsTerms.set(k, lhsMinusRhsTerms.get(k) - v) : -v);\n  lhsMinusRhsTerms.forEach((v, k, m) => is_close(v, 0) ? m.delete(k) : {})\n  const lhsMinusRhs = { terms: lhsMinusRhsTerms, bias: cLHS.bias - cRHS.bias };\n  return {\n    ...lhsMinusRhs,\n    op: c.op,\n  }\n}\n\n// turns affine expression into a_1x_1 + ... + a_nx_n + b\nconst canonicalizeExpr = (c: AffineExpr): CanonicalAffineExpr => {\n  if (typeof c === 'number') {\n    return {\n      terms: new Map(),\n      bias: c,\n    }\n  } else if ('v' in c) {\n    // variable\n    return {\n      terms: new Map([[c, 1]]),\n      bias: 0,\n    }\n  } else if (c.type === 'plus') {\n    const cExprs = c.exprs.map(canonicalizeExpr);\n    console.log('cExprs', cExprs);\n    return cExprs.reduce((acc, ce) => {\n     ce.terms.forEach((v, k) => acc.terms.has(k) ? acc.terms.set(k, acc.terms.get(k) + v) : acc.terms.set(k, v));\n     return {\n      terms: acc.terms,\n      bias: acc.bias + ce.bias,\n     };\n  }, { terms: new Map(), bias: 0});\n  } else if (c.type === 'mul') {\n    const cExpr = canonicalizeExpr(c.expr);\n    const mulTerms = new Map();\n    cExpr.terms.forEach((v, k) => mulTerms.set(k, v * c.scalar));\n    return {\n      terms: mulTerms,\n      bias: cExpr.bias * c.scalar,\n    };\n  } else {\n    throw 'never';\n  }\n}\n\nexport const mkAffineConstraint = (lhs: AffineExpr, op: 'eq' | 'le' | 'ge', rhs: AffineExpr, strength=required): Constraint => {\n  const canonicalConstraint = canonicalizeAffineConstraint({lhs, op, rhs});\n  console.log('canonical constraint', canonicalConstraint);\n\n  return mkConstraint(\n  new Set(canonicalConstraint.terms.keys()),\n  new Map(Array.from(canonicalConstraint.terms.keys()).map((v) => {\n    return [v, () => {\n      /* a_1x_1 + ... + a_ix_i + ... + a_nx_n + b = 0 -> x_i = -1/a_i * (a_1x_1 + ... + a_nx_n + b)\n        (without x_i ofc) */\n    const vExprBounds = Interval.div(\n      Array.from(canonicalConstraint.terms.entries())\n        .reduce((acc, [x_i, a_i]) => {\n          return x_i === v ? acc : Interval.add(acc, Interval.mul(Interval.fromFloat(a_i), x_i.v.bounds))},\n                Interval.fromFloat(canonicalConstraint.bias)),\n      Interval.fromFloat(-canonicalConstraint.terms.get(v)))\n      if (canonicalConstraint.op === 'eq') {\n        // v.v.bounds = Interval.intersect(v.v.bounds, vExprBounds);\n        v.v.bounds = Interval.intersectBestEffort(v.v.bounds, vExprBounds);\n      } else if (canonicalConstraint.op === 'le') {\n        // v.v.bounds = Interval.intersect(v.v.bounds, { lb: -Infinity, ub: vExprBounds.ub })\n        v.v.bounds = Interval.intersectBestEffort(v.v.bounds, { lb: -Infinity, ub: vExprBounds.ub })\n      } else if (canonicalConstraint.op === 'ge') {\n        // v.v.bounds = Interval.intersect(v.v.bounds, { lb: vExprBounds.lb, ub: Infinity })\n        v.v.bounds = Interval.intersectBestEffort(v.v.bounds, { lb: vExprBounds.lb, ub: Infinity })\n      } else {\n        throw 'never'\n      }\n    }]\n  })),\n  () => `${lhs} ${op} ${rhs}`, /* TODO: do better */\n  () => {\n    if (!(Array.from(canonicalConstraint.terms.keys()).every((v) => isConst(v.v)))) {\n      return 'unknown'\n    } else {\n      /* actually compute the concrete term */\n      const exprVal = Array.from(canonicalConstraint.terms.entries())\n        .reduce((acc, [x_i, a_i]) => acc + a_i * value(x_i), canonicalConstraint.bias);\n      if (canonicalConstraint.op === 'eq') {\n        return is_close(exprVal, 0) ? 'sat' : 'unsat';\n      } else if (canonicalConstraint.op === 'le') {\n        return (exprVal < 0 || is_close(exprVal, 0)) ? 'sat' : 'unsat';\n      } else if (canonicalConstraint.op === 'ge') {\n        return (exprVal > 0 || is_close(exprVal, 0)) ? 'sat' : 'unsat';\n      } else {\n        throw 'never';\n      }\n    }\n  },\n  strength,\n)\n}\n","/* TODO: maybe this would be better as a class? So much mutation that it seems kinda natural. */\n\nexport type Adapton<T> = {\n  // readonly\n  thunk: () => T,\n\n  result: T | undefined,\n  // should really be heterogeneous sets I guess?\n  sub: Set<Adapton<any>>,\n  super: Set<Adapton<any>>,\n  isClean: boolean,\n}\n\nexport const isAdapton = (o: any): boolean => {\n  return 'thunk' in o && 'result' in o && 'sub' in o && 'super' in o && 'isClean' in o\n    && typeof o.thunk === 'function' && o.sub instanceof Set && o.super instanceof Set && typeof o.isClean === 'boolean';\n}\n\nexport const mk = <T>(thunk: () => T): Adapton<T> => ({\n  thunk,\n  result: undefined,\n  sub: new Set(),\n  super: new Set(),\n  isClean: false,\n})\n\nexport const addDCGEdge = <S, T>(aSuper: Adapton<S>, aSub: Adapton<T>): void => {\n  aSuper.sub.add(aSub);\n  aSub.super.add(aSuper);\n}\n\nexport const delDCGEdge = <S, T>(aSuper: Adapton<S>, aSub: Adapton<T>): void => {\n  aSuper.sub.delete(aSub);\n  aSub.sub.delete(aSuper);\n}\n\nexport const compute = <T>(a: Adapton<T>): T => {\n  if (a.isClean) {\n    return a.result;\n  } else {\n    a.sub.forEach((x) => delDCGEdge(a, x))\n    a.isClean = true;\n    a.result = a.thunk();\n    return compute(a);\n  }\n}\n\nconst dirty = <T>(a: Adapton<T>): void => {\n  if (a.isClean) {\n    a.isClean = false;\n    a.super.forEach(dirty);\n  }\n}\n\nexport const ref = <T>(val: T): Adapton<T> => {\n  const a: Adapton<T> = {\n    thunk: () => a.result,\n    result: val,\n    sub: new Set(),\n    super: new Set(),\n    isClean: true,\n  };\n\n  return a;\n}\n\nexport const setRef = <T>(a: Adapton<T>, val: T): void => {\n  a.result = val;\n  dirty(a);\n}\n\n","import { mkConstEqConstraint, mkVar, solve, value, mkEqConstraint, mkAffineConstraint, plus, weak, medium } from './indigo';\nimport * as Adapton from './miniAdapton/microAdapton';\n\nconsole.log(\"hello world\");\n\nconst r1 = Adapton.ref(8);\nconst r2 = Adapton.ref(10);\nconst a = Adapton.mk(() => {\n  Adapton.addDCGEdge(a, r1);\n  Adapton.addDCGEdge(a, r2);\n  return Adapton.compute(r1) - Adapton.compute(r2);\n})\n\n// -2\nconsole.log(Adapton.compute(a));\nAdapton.setRef(r1, 2);\n// -8\nconsole.log(Adapton.compute(a));\n\n{\n  const x = mkVar('x');\n  const c1 = mkConstEqConstraint(x, 5);\n  solve([c1]);\n  console.log(value(x));\n  console.log(c1.toString());\n}\n\n{\n  const x = mkVar('x');\n  const c1 = mkConstEqConstraint(x, 5);\n  const y = mkVar('y');\n  const c2 = mkEqConstraint(x, y);\n  const constraints = [c1, c2];\n  solve(constraints);\n  console.log(constraints.map(c => c.toString()));\n  console.log(`x: ${value(x)}, y: ${value(y)}`);\n}\n\n{\n  const x = mkVar('x');\n  const c1 = mkConstEqConstraint(x, 5);\n  const y = mkVar('y');\n  const c2 = mkEqConstraint(x, y);\n  const c3 = mkConstEqConstraint(y, 5);\n  const constraints = [c1, c2, c3];\n  solve(constraints);\n  console.log(constraints.map(c => c.toString()));\n  console.log(`x: ${value(x)}, y: ${value(y)}`);\n}\n\n// {\n//   const x = mkVar('x');\n//   const c1 = mkConstEqConstraint(x, 5);\n//   const y = mkVar('y');\n//   const c2 = mkEqConstraint(x, y);\n//   const c3 = mkConstEqConstraint(y, 6);\n//   const constraints = [c1, c2, c3];\n//   solve(constraints);\n//   console.log(constraints.map(c => c.toString()));\n//   console.log(`x: ${value(x)}, y: ${value(y)}`);\n// }\n\n{\n  const x = mkVar('x');\n  const c1 = mkConstEqConstraint(x, 5);\n  const y = mkVar('y');\n  // const c2 = mkEqConstraint(x, y);\n  const c2 = mkAffineConstraint(plus(x, y), 'eq', 12)\n  // const c3 = mkConstEqConstraint(y, 6);\n  const constraints = [c1, c2];\n  solve(constraints);\n  console.log(constraints.map(c => c.toString()));\n  console.log(`x: ${value(x)}, y: ${value(y)}`);\n}\n\n{\n  // TODO: the inequality constraint is not properly respected...\n  const x = mkVar('x');\n  const y = mkVar('y');\n  const z = mkVar('z');\n  const constraints = [\n    // medium default constraints\n    mkAffineConstraint(x, 'ge', 0, medium),\n    mkAffineConstraint(y, 'ge', 0, medium),\n    mkAffineConstraint(z, 'ge', 0, medium),\n    // weak default constraints\n    mkConstEqConstraint(x, 0, weak),\n    mkConstEqConstraint(y, 0, weak),\n    mkConstEqConstraint(z, 0, weak),\n    // spacing constraints\n    mkAffineConstraint(plus(x, 5), 'eq', y),\n    mkAffineConstraint(plus(y, 5), 'eq', z),\n  ];\n  solve(constraints);\n  console.log(constraints.map(c => c.toString()));\n  console.log(`x: ${value(x)}, y: ${value(y)}, z: ${value(z)}`);\n}"]}